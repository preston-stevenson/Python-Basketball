{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5d427e2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "# Constants\n",
    "EVENTMSGTYPE = 'EVENTMSGTYPE'\n",
    "EVENTMSGACTIONTYPE = 'EVENTMSGACTIONTYPE'\n",
    "HOMEDESCRIPTION = 'HOMEDESCRIPTION'\n",
    "NEUTRALDESCRIPTION = 'NEUTRALDESCRIPTION'\n",
    "VISITORDESCRIPTION = 'VISITORDESCRIPTION'\n",
    "PERIOD = 'PERIOD'\n",
    "PCTIMESTRING = 'PCTIMESTRING'\n",
    "TIME_ELAPSED = 'TIME_ELAPSED'\n",
    "TIME_ELAPSED_PERIOD = 'TIME_ELAPSED_PERIOD'\n",
    "PLAYER1_ID = 'PLAYER1_ID'\n",
    "PLAYER1_TEAM_ID = 'PLAYER1_TEAM_ID'\n",
    "PLAYER2_ID = 'PLAYER2_ID'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "13b18583",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "EVENTMSGTYPE Types:\n",
    "\n",
    "1 -> MAKE\n",
    "2 -> MISS\n",
    "3 -> FreeThrow\n",
    "4 -> Rebound\n",
    "5 -> Turnover\n",
    "6 -> Foul\n",
    "7 -> Violation\n",
    "8 -> Substitution\n",
    "9 -> Timeout\n",
    "10 -> JumpBall\n",
    "11 -> Ejection\n",
    "12 -> StartOfPeriod\n",
    "13 -> EndOfPeriod\n",
    "14 -> Empty\n",
    "\"\"\"\n",
    "\n",
    "def is_made_shot(row):\n",
    "    return row[EVENTMSGTYPE] == 1\n",
    "\n",
    "def is_missed_shot(row):\n",
    "    return row[EVENTMSGTYPE] == 2\n",
    "\n",
    "def is_free_throw(row):\n",
    "    return row[EVENTMSGTYPE] == 3\n",
    "\n",
    "def is_rebound(row):\n",
    "    return row[EVENTMSGTYPE] == 4\n",
    "\n",
    "def is_turnover(row):\n",
    "    return row[EVENTMSGTYPE] == 5\n",
    "\n",
    "def is_foul(row):\n",
    "    return row[EVENTMSGTYPE] == 6\n",
    "\n",
    "def is_violation(row):\n",
    "    return row[EVENTMSGTYPE] == 7\n",
    "\n",
    "def is_substitution(row):\n",
    "    return row[EVENTMSGTYPE] == 8\n",
    "\n",
    "def is_timeout(row):\n",
    "    return row[EVENTMSGTYPE] == 9\n",
    "\n",
    "def is_jump_ball(row):\n",
    "    return row[EVENTMSGTYPE] == 10\n",
    "\n",
    "def is_ejection(row):\n",
    "    return row[EVENTMSGTYPE] == 11\n",
    "\n",
    "def is_start_of_period(row):\n",
    "    return row[EVENTMSGTYPE] == 12\n",
    "\n",
    "def is_end_of_period(row):\n",
    "    return row[EVENTMSGTYPE] == 13\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "664eac01",
   "metadata": {},
   "outputs": [],
   "source": [
    "#this is to check that the miss actually happened\n",
    "def is_miss(row):\n",
    "    miss = False\n",
    "    if row[HOMEDESCRIPTION]:\n",
    "        miss = miss or 'miss' in row[HOMEDESCRIPTION].lower()\n",
    "    if row[VISITORDESCRIPTION]:\n",
    "        miss = miss or 'miss' in row[VISITORDESCRIPTION].lower()\n",
    "    return miss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "63b79a84",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\"\"\"\n",
    "eventActionType Types: FOULS\n",
    "\n",
    "% = technical FT\n",
    "* = FT\n",
    "\n",
    "FOUL TYPES\n",
    " 1 - Personal\n",
    " 2 - Shooting *\n",
    " 3 - Loose Ball\n",
    " 4 - Offensive\n",
    " 5 - Inbound foul *(1 FTA)\n",
    " 6 - Away from play\n",
    " 8 - Punch foul %(Technical)\n",
    " 9 - Clear Path *\n",
    " 10 - Double Foul\n",
    " 11 - Technical *%\n",
    " 12 - Non-Unsportsmanlike (Technical)\n",
    " 13 - Hanging *%(Technical)\n",
    " 14 - Flagrant 1 *%\n",
    " 15 - Flagrant 2 *%\n",
    " 16 - Double Technical\n",
    " 17 - Defensive 3 seconds *%(Technical)\n",
    " 18 - Delay of game\n",
    " 19 - Taunting *%(Technical)\n",
    " 25 - Excess Timeout *%(Technical)\n",
    " 26 - Charge\n",
    " 27 - Personal Block\n",
    " 28 - Personal Take\n",
    " 29 - Shooting Block *\n",
    " 30 - Too many players *%(Technical)\n",
    "\n",
    "Offensive fouls: Offensive, Charge\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def is_shooting_foul(row):\n",
    "    return is_foul(row) and row[EVENTMSGACTIONTYPE] == 2\n",
    "\n",
    "def is_away_from_play_foul(row):\n",
    "    return is_foul(row) and row[EVENTMSGACTIONTYPE] == 6\n",
    "\n",
    "def is_inbound_foul(row):\n",
    "    return is_foul(row) and row[EVENTMSGACTIONTYPE] == 5\n",
    "\n",
    "def is_loose_ball_foul(row):\n",
    "    return is_foul(row) and row[EVENTMSGACTIONTYPE] == 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c56389e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "eventActionType Types: Rebounds\n",
    "\n",
    "Rebound Types\n",
    "0 - Player Rebound\n",
    "1 - Team Rebound*\n",
    "Not always labeled properly\n",
    "\"\"\"\n",
    "def is_team_rebound(row):\n",
    "    return is_rebound(row) and (row[EVENTMSGACTIONTYPE] == 1 or math.isnan(row['PLAYER1_TEAM_ID']))\n",
    "\n",
    "\n",
    "def is_defensive_rebound(ind, row, rows):\n",
    "    if not is_rebound(row):\n",
    "        return False\n",
    "    shot = extract_missed_shot_for_rebound(ind, rows)\n",
    "    if is_team_rebound(row):\n",
    "        return shot['PLAYER1_TEAM_ID'] != row['PLAYER1_ID']\n",
    "    else:\n",
    "        return shot['PLAYER1_TEAM_ID'] != row['PLAYER1_TEAM_ID']\n",
    "\n",
    "def extract_missed_shot_for_rebound(ind, rows):\n",
    "    subset_of_rows = rows[max(0, ind - 10): ind]\n",
    "    subset_of_rows.reverse()\n",
    "    for r in subset_of_rows:\n",
    "        if is_miss(r[1]) or is_missed_free_throw(r[1]):\n",
    "            return r[1]\n",
    "    return subset_of_rows[-1][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ae1feedd",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "eventActionType Types: Free Throws\n",
    "\n",
    "Free Throw Types\n",
    "\n",
    "10 - 1 of 1\n",
    "11 - 1 of 2\n",
    "12 - 2 of 2\n",
    "13 - 1 of 3\n",
    "14 - 2 of 3\n",
    "15 - 3 of 3\n",
    "16 - Technical\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def is_missed_free_throw(row):\n",
    "    return is_free_throw(row) and is_miss(row)\n",
    "\n",
    "def is_1_of_1(row):\n",
    "    return is_free_throw(row) and row[EVENTMSGACTIONTYPE] == 10\n",
    "\n",
    "def is_2_of_2(row):\n",
    "    return is_free_throw(row) and row[EVENTMSGACTIONTYPE] == 12\n",
    "\n",
    "def is_3_of_3(row):\n",
    "    return is_free_throw(row) and row[EVENTMSGACTIONTYPE] == 15\n",
    "\n",
    "def is_technical(row):\n",
    "    return is_free_throw(row) and row[EVENTMSGACTIONTYPE] == 13\n",
    "\n",
    "def is_last_free_throw(row):\n",
    "    return is_1_of_1(row) or is_last_multi_free_throw(row)\n",
    "\n",
    "def is_last_multi_free_throw(row):\n",
    "    return is_2_of_2(row) or is_3_of_3(row)\n",
    "\n",
    "def is_last_free_throw_made(ind, row, rows):\n",
    "    if not is_free_throw(row):\n",
    "        return False\n",
    "    foul = extract_foul_for_last_freethrow(ind, row, rows)\n",
    "    return (is_last_multi_free_throw(row) or (\n",
    "        is_1_of_1(row) and not is_away_from_play_foul(foul) and not is_loose_ball_foul(foul) and not is_inbound_foul(\n",
    "            foul))) and not is_miss(row)\n",
    "\n",
    "def extract_foul_for_last_freethrow(ind, row, rows):\n",
    "    subset_of_rows = rows[max(0, ind - 10): ind]\n",
    "    subset_of_rows.reverse()\n",
    "    for r in subset_of_rows:\n",
    "        if is_foul(r[1]):\n",
    "            return r[1]\n",
    "    print(ind)\n",
    "    print(row)\n",
    "    return subset_of_rows[0][1]\n",
    "\n",
    "\n",
    "def is_and_1(ind, row, rows):\n",
    "    if not is_made_shot(row):\n",
    "        return False\n",
    "    # check next 20 events after the make\n",
    "    subset_of_rows = rows[ind + 1: min(ind + 20, len(rows))]\n",
    "    cnt = 0\n",
    "    for sub_ind, r in subset_of_rows:\n",
    "        # We are looking for fouls or 1 of 1 free throws that happen within 10 seconds of the made shot.\n",
    "        # We also need to make sure those 1 of 1s are the result of a different type of foul that results in 1 FT.\n",
    "        # If we have both a foul and a 1 of 1 ft that meet these conditions we can safely assume this shot resulted in\n",
    "        # an And-1\n",
    "        if (is_foul(r) or is_1_of_1(r)) and row[TIME_ELAPSED] <= r[TIME_ELAPSED] <= row[TIME_ELAPSED] + 10:\n",
    "            if is_foul(r) and not is_technical(r) and not is_loose_ball_foul(r) and not is_inbound_foul(r) and r[\n",
    "                PLAYER2_ID] == row[PLAYER1_ID]:\n",
    "                cnt += 1\n",
    "            elif is_1_of_1(r) and r[PLAYER1_ID] == row[PLAYER1_ID]:\n",
    "                cnt += 1\n",
    "    return cnt == 2\n",
    "\n",
    "def is_make_and_not_and_1(ind, row, rows):\n",
    "    return is_made_shot(row) and not is_and_1(ind, row, rows)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "131fc5d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#checking if three\n",
    "def is_three(row):\n",
    "    three = False\n",
    "    if row[HOMEDESCRIPTION]:\n",
    "        three = three or '3PT' in row[HOMEDESCRIPTION]\n",
    "    if row[VISITORDESCRIPTION]:\n",
    "        three = three or '3PT' in row[VISITORDESCRIPTION]\n",
    "    return three\n",
    "\n",
    "def is_team_turnover(row):\n",
    "    return is_turnover(row) and (is_5_second_violation(row) or is_8_second_violation(row) or is_shot_clock_violation(row) or is_too_many_players_violation(row))\n",
    "\n",
    "def is_5_second_violation(row):\n",
    "    return is_turnover(row) and row[EVENTMSGACTIONTYPE] == 9\n",
    "\n",
    "def is_8_second_violation(row):\n",
    "    return is_turnover(row) and row[EVENTMSGACTIONTYPE] == 10\n",
    "\n",
    "def is_shot_clock_violation(row):\n",
    "    return is_turnover(row) and row[EVENTMSGACTIONTYPE] == 11\n",
    "\n",
    "def is_too_many_players_violation(row):\n",
    "    return is_turnover(row) and row[EVENTMSGACTIONTYPE] == 44"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3f7caa10",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2a183fc7-e5a6-4ba3-95ec-1bd16ef07280",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
